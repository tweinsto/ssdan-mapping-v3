<meta charset="UTF-8">
<title>Median Earnings by Industry – {fips}</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
body {{
margin: 0;
font-family: sans-serif;
background: white;
}}
.layout {{
display: flex;
flex-direction: column;
align-items: center;
padding: 1.5rem;
}}
label {{
font-weight: bold;
margin-bottom: 0.5rem;
}}
#countySelect {{
font-size: 1rem;
padding: 0.4rem 0.8rem;
margin-bottom: 1rem;
}}
canvas {{
width: 100%;
}}
</style>
</head>
<body>
<div class="layout">
<label for="countySelect">Median Earnings by Industry:</label>
<select id="countySelect"></select>
<canvas id="barChart"></canvas>
</div>
<script>
const data = {bar_json};
{colors_js}
const ctx = document.getElementById("barChart").getContext("2d");
let chart;
function renderChart(county) {{
const values = data[county];
const labels = Object.keys(values);
const earnings = Object.values(values);
if (chart) chart.destroy();
chart = new Chart(ctx, {{
type: "bar",
data: {{
labels: labels,
datasets: [{{
label: "Median Earnings ($)",
data: earnings,
backgroundColor: labels.map(label => colors[label] || "#ccc")
}}]
}},
options: {{
responsive: true,
maintainAspectRatio: true,
aspectRatio: 1.5,
indexAxis: "x",
scales: {{
y: {{
beginAtZero: true,
title: {{
display: true,
text: "Median Earnings ($)"
}},
ticks: {{
callback: function(value) {{
return "$" + value.toLocaleString();
}}
}}
}},
x: {{
ticks: {{
maxRotation: 45,
minRotation: 20,
autoSkip: false,
callback: function(value, index, ticks) {{
let label = this.getLabelForValue(value);
return label.length > 25 ? label.slice(0, 25) + "…" : label;
}}
}}
}}
}},
plugins: {{
tooltip: {{
callbacks: {{
label: function(context) {{
return "$" + context.parsed.y.toLocaleString();
}}
}}
}},
legend: {{
display: false
}}
}}
}}
}});
}}
const select = document.getElementById("countySelect");
Object.keys(data).forEach(county => {{
const option = document.createElement("option");
option.value = county;
option.text = county;
select.appendChild(option);
}});
select.value = "Statewide";
select.addEventListener("change", () => renderChart(select.value));
renderChart("Statewide");
</script>
</body>
</html>
'))
save_html(html_page, file = file.path(
"/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/maps/ind-trend/",
paste0(fips, ".html")
))
cat("✅ Saved:", fips, "\n")
}
# --- LOOP ---
for (fips in unique(df_long$state_fips)) {
state_data <- df_long %>% filter(state_fips == fips)
counties <- unique(state_data$county)
bar_data <- list()
# STATEWIDE
statewide_medians <- state_data %>%
filter(industry %in% valid_inds) %>%
group_by(industry) %>%
summarize(earnings = median(earnings, na.rm = TRUE), .groups = "drop")
bar_data[["Statewide"]] <- as.list(setNames(
round(statewide_medians$earnings),  # no decimals
statewide_medians$industry
))
# COUNTIES
for (cty in counties) {
cty_medians <- state_data %>%
filter(county == cty, industry %in% valid_inds) %>%
group_by(industry) %>%
summarize(earnings = median(earnings, na.rm = TRUE), .groups = "drop")
bar_data[[cty]] <- as.list(setNames(
round(cty_medians$earnings),
cty_medians$industry
))
}
bar_json <- toJSON(bar_data, auto_unbox = TRUE, pretty = FALSE)
colors_js <- paste0(
"const colors = {\n",
paste(sprintf("  '%s': '%s'", names(filtered_colors), filtered_colors), collapse = ",\n"),
"\n};"
)
html_page <- htmltools::HTML(glue::glue('
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Median Earnings by Industry – {fips}</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
body {{
margin: 0;
font-family: sans-serif;
background: white;
}}
.layout {{
display: flex;
flex-direction: column;
align-items: center;
padding: 1.5rem;
}}
label {{
font-weight: bold;
margin-bottom: 0.5rem;
}}
#countySelect {{
font-size: 1rem;
padding: 0.4rem 0.8rem;
margin-bottom: 1rem;
}}
canvas {{
width: 100%;
}}
</style>
</head>
<body>
<div class="layout">
<label for="countySelect">Median Earnings by Industry:</label>
<select id="countySelect"></select>
<canvas id="barChart"></canvas>
</div>
<script>
const data = {bar_json};
{colors_js}
const ctx = document.getElementById("barChart").getContext("2d");
let chart;
function renderChart(county) {{
const values = data[county];
const labels = Object.keys(values);
const earnings = Object.values(values);
if (chart) chart.destroy();
chart = new Chart(ctx, {{
type: "bar",
data: {{
labels: labels,
datasets: [{{
label: "Median Earnings ($)",
data: earnings,
backgroundColor: labels.map(label => colors[label] || "#ccc")
}}]
}},
options: {{
responsive: true,
maintainAspectRatio: true,
aspectRatio: 1.5,
indexAxis: "x",
scales: {{
y: {{
beginAtZero: true,
title: {{
display: true,
text: "Median Earnings ($)"
}},
ticks: {{
callback: function(value) {{
return "$" + value.toLocaleString();
}}
}}
}},
x: {{
ticks: {{
maxRotation: 45,
minRotation: 20,
autoSkip: false,
callback: function(value, index, ticks) {{
let label = this.getLabelForValue(value);
return label.length > 25 ? label.slice(0, 25) + "…" : label;
}}
}}
}}
}},
plugins: {{
tooltip: {{
callbacks: {{
label: function(context) {{
return "$" + context.parsed.y.toLocaleString();
}}
}}
}},
legend: {{
display: false
}}
}}
}}
}});
}}
const select = document.getElementById("countySelect");
Object.keys(data).forEach(county => {{
const option = document.createElement("option");
option.value = county;
option.text = county;
select.appendChild(option);
}});
select.value = "Statewide";
select.addEventListener("change", () => renderChart(select.value));
renderChart("Statewide");
</script>
</body>
</html>
'))
save_html(html_page, file = file.path(
"/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping-v2/maps/ind-trend/",
paste0(fips, ".html")
))
cat("✅ Saved:", fips, "\n")
}
# state maps
present_levels <- filtered_levels
state_palette <- colorFactor(palette = filtered_colors, domain = present_levels)
# Generate a map for each state
walk(unique(top_industry_data$state_fips), function(fips) {
state_data <- top_industry_data %>%
filter(state_fips == fips)
if (nrow(state_data) == 0 || all(is.na(state_data$max_industry))) return(NULL)
# Set factor levels explicitly for consistency
state_data$max_industry <- factor(state_data$max_industry, levels = present_levels)
leaflet_map <- leaflet(state_data, options = leafletOptions(minZoom = 5, maxZoom = 8)) %>%
addProviderTiles("CartoDB.PositronNoLabels") %>%
addPolygons(
fillColor = ~state_palette(max_industry),
fillOpacity = 0.9,
color = "white",
weight = 1,
label = ~paste0(NAME, ": ", max_industry),
highlightOptions = highlightOptions(weight = 2, color = "black", bringToFront = TRUE)
) %>%
addLegend(
position = "topright",
colors = unname(filtered_colors),
labels = names(filtered_colors),
title = "Highest Earning Industry (2023)",
opacity = 1
)
saveWidget(
widget = leaflet_map,
file = file.path(
"/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping-v2/maps/ind-state-maps/",
paste0(fips, ".html")
),
selfcontained = FALSE
)
})
View(industry_shifted)
industry_shifted %>% shift_geometry(industry_shifted)
industry_shifted %>% industry_shifted %>% shift_geometry()
industry_shifted <- industry_shifted %>% shift_geometry()
shift_geometry <- function(sf_obj) {
alaska <- sf_obj %>% filter(state_fips == "02") %>% st_transform(2163)
hawaii <- sf_obj %>% filter(state_fips == "15") %>% st_transform(2163)
mainland <- sf_obj %>% filter(!state_fips %in% c("02", "15")) %>% st_transform(4326)
alaska_geom <- st_geometry(alaska) * 0.3 + c(-380000, -3000000)
hawaii_geom <- st_geometry(hawaii) * 1.2 + c(4500000, -900000)
st_crs(alaska_geom) <- 2163; st_crs(hawaii_geom) <- 2163
alaska <- st_set_geometry(alaska, alaska_geom) %>% st_transform(4326)
hawaii <- st_set_geometry(hawaii, hawaii_geom) %>% st_transform(4326)
bind_rows(mainland, alaska, hawaii) %>% st_as_sf()
}
industry_shifted <- industry_shifted %>% shift_geometry()
industry_shifted <- shift_geometry(industry_shifted)
industry_shifted <-  st_as_sf()
st_geometry(industry_shifted)
industry <- left_join(top_industry_state, state_geom, by = "GEOID") %>%
st_transform(4326)
industry <- left_join(top_industry_state, state_geom, by = "GEOID") %>%
st_as_sf() %>%  # Convert to an 'sf' object
st_transform(4326)  # Apply the CRS transformation
industry_shifted <- shift_geometry(industry)
state_geom <- shift_geometry(state_geom)
industry <- left_join(top_industry_state, state_geom, by = "GEOID") %>%
st_as_sf() %>%  # Convert to an 'sf' object
st_transform(4326)  # Apply the CRS transformation
industry_shifted <- shift_geometry(industry)
# -------------------- STEP 4: WHITE MASK --------------------
world_box <- st_as_sfc(st_bbox(c(xmin = -180, ymin = -90, xmax = 180, ymax = 90)), crs = 4326)
us_box <- st_as_sfc(st_bbox(c(xmin = -130, ymin = 15, xmax = -60, ymax = 55)), crs = 4326)
mask_diff <- st_difference(st_make_valid(world_box), st_make_valid(us_box))
mask_polygon <- st_collection_extract(mask_diff, "POLYGON") %>% st_make_valid()
# -------------------- STEP 5: COLOR PALETTE --------------------
# Manual industry color definitions (based on CensusScope)
combined_colors <- c(
"#FFFF01", "#00008B", "#7570B1", "#66A61E", "#E6AB01", "#379", "#E41A1C", "#377EF1", "#FF7F00", "#1B9E77", "#A65011", "#F781BF", "#919"
)
# Match with industry labels
filtered_levels <- industry_lookup$group %>% na.omit() %>% as.character() %>% sort()
filtered_colors <- setNames(combined_colors, filtered_levels)
# Create palette
# Step 3: Set max_industry as factor with correct levels
industry_shifted$max_industry <- factor(industry_shifted$max_industry, levels = filtered_levels)
# Step 4: Create leaflet color function
pal <- colorFactor(palette = filtered_colors, domain = filtered_levels)
# -------------------- STEP 6: LEAFLET MAP --------------------
industry_map <- leaflet(options = leafletOptions(
minZoom = 4, maxZoom = 4,
zoomControl = FALSE,
dragging = FALSE,
scrollWheelZoom = FALSE,
doubleClickZoom = FALSE
)) %>%
addTiles(urlTemplate = "") %>%
addRectangles(-180, -90, 180, 90, fillColor = "white", fillOpacity = 1, stroke = FALSE) %>%
addPolygons(data = mask_polygon, fillColor = "white", color = "white", weight = 0, fillOpacity = 1) %>%
addPolygons(
data = industry_shifted,
fillColor = ~pal(max_industry),
color = "white", weight = 0.3, fillOpacity = 0.9,
label = ~paste0(NAME, ": ", max_industry, " (", round(percent, 1), "%)"),
highlightOptions = highlightOptions(weight = 1, color = "black", bringToFront = TRUE)
) %>%
addPolygons(
data = state_geom,
fillOpacity = 0,
color = "black", weight = 1,
layerId = ~link,
highlightOptions = highlightOptions(weight = 2, color = "black", bringToFront = TRUE)
) %>%
addLegend(
position = "topright",
colors = unname(filtered_colors),
labels = names(filtered_colors),
title = "Most Common Industry",
opacity = 1
) %>%
setView(lng = -98.5, lat = 39.8, zoom = 8)
# -------------------- STEP 7: CLICK BEHAVIOR --------------------
industry_map <- htmlwidgets::onRender(industry_map, "
function(el, x) {
var map = this;
var hash = window.location.hash;
map.eachLayer(function(layer) {
if (layer.options && layer.options.layerId) {
layer.on('click', function(e) {
window.top.location.href = layer.options.layerId + hash;
});
}
});
}
")
# -------------------- STEP 8: SAVE --------------------
saveWidget(
widget = industry_map,
file = '/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping-v2/maps/industryearnings.html',
selfcontained = FALSE
)
industry <- left_join(top_industry_state, state_geom, by = "GEOID") %>%
st_as_sf() %>%  # Convert to an 'sf' object
st_transform(4326)  # Apply the CRS transformation
View(industry)
industry_shifted <- shift_geometry(industry)
shift_geometry <- function(sf_obj) {
alaska <- sf_obj %>% filter(state_fips == "02") %>% st_transform(2163)
hawaii <- sf_obj %>% filter(state_fips == "15") %>% st_transform(2163)
mainland <- sf_obj %>% filter(!state_fips %in% c("02", "15")) %>% st_transform(4326)
alaska_geom <- st_geometry(alaska) * 0.3 + c(-380000, -3000000)
hawaii_geom <- st_geometry(hawaii) * 1.2 + c(4500000, -900000)
st_crs(alaska_geom) <- 2163; st_crs(hawaii_geom) <- 2163
alaska <- st_set_geometry(alaska, alaska_geom) %>% st_transform(4326)
hawaii <- st_set_geometry(hawaii, hawaii_geom) %>% st_transform(4326)
bind_rows(mainland, alaska, hawaii) %>% st_as_sf()
}
industry_shifted <- shift_geometry(industry)
# Join with state geometry
state_geom <- states(cb = TRUE, year = 2023) %>%
filter(!STATEFP %in% c("72", "78")) %>%
select(GEOID = STATEFP, geometry) %>%
mutate(link = paste0("industry-pages/", GEOID, ".html"))
state_geom <- shift_geometry(state_geom)
industry <- left_join(top_industry_state, state_geom, by = "GEOID") %>%
st_as_sf() %>%  # Convert to an 'sf' object
st_transform(4326)  # Apply the CRS transformation
shift_geometry <- function(sf_obj) {
alaska <- sf_obj %>% filter(state_fips == "02") %>% st_transform(2163)
hawaii <- sf_obj %>% filter(state_fips == "15") %>% st_transform(2163)
mainland <- sf_obj %>% filter(!state_fips %in% c("02", "15")) %>% st_transform(4326)
alaska_geom <- st_geometry(alaska) * 0.3 + c(-380000, -3000000)
hawaii_geom <- st_geometry(hawaii) * 1.2 + c(4500000, -900000)
st_crs(alaska_geom) <- 2163; st_crs(hawaii_geom) <- 2163
alaska <- st_set_geometry(alaska, alaska_geom) %>% st_transform(4326)
hawaii <- st_set_geometry(hawaii, hawaii_geom) %>% st_transform(4326)
bind_rows(mainland, alaska, hawaii) %>% st_as_sf()
}
industry_shifted <- shift_geometry(industry)
state_geom <- states(cb = TRUE, year = 2023) %>%
filter(!STATEFP %in% c("72", "78")) %>%
select(GEOID = STATEFP, geometry) %>%
mutate(link = paste0("industry-pages/", GEOID, ".html")) %>%
st_as_sf()  # Convert to sf object
# Apply the shift_geometry function on state_geom (which is now an sf object)
state_geom <- shift_geometry(state_geom)
# Ensure top_industry_state is also an sf object before the join and transformation
industry <- left_join(top_industry_state, state_geom, by = "GEOID") %>%
st_as_sf() %>%  # Convert to an 'sf' object
st_transform(4326)  # Apply CRS transformation
# Now shift the industry data
industry_shifted <- shift_geometry(industry)
state_geom <- states(cb = TRUE, year = 2023) %>%
filter(!STATEFP %in% c("72", "78")) %>%
select(GEOID = STATEFP, geometry) %>%
mutate(link = paste0("industry-pages/", GEOID, ".html")) %>%
st_as_sf()  # Convert to sf object
# Apply the shift_geometry function to state_geom
state_geom <- shift_geometry(state_geom)
# Ensure top_industry_state has geometry (convert it to sf object if necessary)
top_industry_state_sf <- top_industry_state %>%
st_as_sf()  # Convert to sf object if not already an 'sf' object
state_geom <- states(cb = TRUE, year = 2023) %>%
filter(!STATEFP %in% c("72", "78")) %>%
select(GEOID = STATEFP, geometry) %>%
mutate(link = paste0("industry-pages/", GEOID, ".html")) %>%
st_as_sf()  # Convert to sf object
# Apply the shift_geometry function to state_geom
state_geom <- shift_geometry(state_geom)
# Ensure top_industry_state has geometry (convert it to sf object if necessary)
top_industry_state_sf <- left_join(top_industry_state, state_geom, by = "GEOID") %>%
st_as_sf()  # Convert to sf object
# Now, you can apply CRS transformation and shift geometry as needed
industry <- top_industry_state_sf %>%
st_transform(4326)  # Apply CRS transformation
# Apply the shift_geometry function
industry_shifted <- shift_geometry(industry)
top20_data <- get_acs(
geography = "state",
variables = "B19081_005",  # Mean income of highest quintile (top 20%)
year = 2023,
survey = "acs5",
geometry = TRUE,
cache_table = TRUE,
cb = TRUE
) %>%
rename(top20_income = estimate, state_fips = GEOID) %>%
mutate(link = paste0("top20-pages/", state_fips, ".html")) %>%
st_transform(4326)
top20_data <- get_acs(
geography = "state",
variables = "B19081_005",  # Mean income of highest quintile (top 20%)
year = 2023,
survey = "acs5",
geometry = TRUE,
cache_table = TRUE,
cb = TRUE
) %>%
rename(top20_income = estimate, state_fips = GEOID) %>%
mutate(link = paste0("top20-pages/", state_fips, ".html")) %>%
st_transform(4326)

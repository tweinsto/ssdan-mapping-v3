widget = plumbing_map,
file = "/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/misc/plumbing-map.html",
selfcontained = FALSE
)
plumbing_clean <- plumbing_data %>%
select(GEOID, NAME, variable, estimate, geometry) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(
pct_no_plumbing = no_plumbing / total,
state_fips = substr(GEOID, 1, 2)
)
# -------------------- 2. SHIFT GEOMETRY --------------------
shift_geometry <- function(sf_obj) {
alaska <- sf_obj %>% filter(state_fips == "02") %>% st_transform(2163)
hawaii <- sf_obj %>% filter(state_fips == "15") %>% st_transform(2163)
mainland <- sf_obj %>% filter(!state_fips %in% c("02", "15")) %>% st_transform(4326)
alaska_geom <- st_geometry(alaska) * 0.3 + c(-380000, -3000000)
hawaii_geom <- st_geometry(hawaii) * 1.2 + c(4500000, -900000)
st_crs(alaska_geom) <- 2163; st_crs(hawaii_geom) <- 2163
alaska <- st_set_geometry(alaska, alaska_geom) %>% st_transform(4326)
hawaii <- st_set_geometry(hawaii, hawaii_geom) %>% st_transform(4326)
bind_rows(mainland, alaska, hawaii) %>% st_as_sf()
}
plumbing_shifted <- shift_geometry(plumbing_clean)
# -------------------- 3. STATE GEOMETRY --------------------
state_geom_plumbing <- states(cb = TRUE, year = 2023) %>%
filter(!STATEFP %in% c("72", "78")) %>%
select(state_fips = STATEFP, geometry) %>%
mutate(link = paste0("plumbing-pages/", state_fips, ".html"))
state_geom_plumbing <- shift_geometry(state_geom_plumbing)
# -------------------- 4. WHITE MASK --------------------
world_box <- st_as_sfc(st_bbox(c(xmin = -180, ymin = -90, xmax = 180, ymax = 90)), crs = 4326)
us_box <- st_as_sfc(st_bbox(c(xmin = -130, ymin = 15, xmax = -60, ymax = 55)), crs = 4326)
mask_polygon <- st_difference(st_make_valid(world_box), st_make_valid(us_box)) %>%
st_collection_extract("POLYGON") %>%
st_set_crs(4326)
vals <- plumbing_shifted$pct_no_plumbing
max_val <- max(vals, na.rm = TRUE)
# Create 10 equal-width bins between 0 and max
breaks <- seq(0, ceiling(max_val * 100) / 100, length.out = 11)  # 10 breaks = 11 endpoints
colors <- colorRampPalette(brewer.pal(9, "OrRd"))(length(breaks) - 1)
pal <- colorBin(colors, domain = vals, bins = breaks)
plumbing_map <- leaflet(options = leafletOptions(
minZoom = 4, maxZoom = 4,
zoomControl = FALSE, dragging = FALSE,
scrollWheelZoom = FALSE, doubleClickZoom = FALSE
)) %>%
addTiles(urlTemplate = "") %>%
addRectangles(lng1 = -180, lat1 = -90, lng2 = 180, lat2 = 90,
fillColor = "white", fillOpacity = 1, stroke = FALSE) %>%
addPolygons(data = mask_polygon, fillColor = "white", color = "white", weight = 0, fillOpacity = 1) %>%
addPolygons(
data = plumbing_shifted,
fillColor = ~pal(pct_no_plumbing),
color = "white", weight = 0.3, fillOpacity = 0.9,
label = ~paste0(NAME, ": ", round(pct_no_plumbing * 100, 2), "%"),
highlightOptions = highlightOptions(weight = 1, color = "black", bringToFront = TRUE)
) %>%
addPolygons(
data = state_geom_plumbing,
fillOpacity = 0, color = "black", weight = 1,
layerId = ~link,
highlightOptions = highlightOptions(weight = 2, color = "black", bringToFront = TRUE)
) %>%
addLegend(
position = "topright", colors = colors,
labels = paste0(round(breaks[-length(breaks)] * 100), "%"),
title = "No Complete Plumbing (2023)", opacity = 1
) %>%
setView(lng = -98.5, lat = 39.8, zoom = 8)
# -------------------- 6. JS CLICK HANDLER --------------------
plumbing_map <- onRender(plumbing_map, "
function(el, x) {
var map = this;
var hash = window.location.hash;
map.eachLayer(function(layer) {
if (layer.options && layer.options.layerId) {
layer.on('click', function(e) {
window.top.location.href = layer.options.layerId + hash;
});
}
});
}
")
# -------------------- 7. SAVE --------------------
saveWidget(
widget = plumbing_map,
file = "/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/misc/plumbing-map.html",
selfcontained = FALSE
)
# Reshape and calculate % without internet
internet_clean <- internet_data %>%
select(GEOID, NAME, variable, estimate, geometry) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(
pct_no_internet = no_internet / total,
state_fips = substr(GEOID, 1, 2)
)
# -------------------- 2. SHIFT GEOMETRY --------------------
shift_geometry <- function(sf_obj) {
alaska <- sf_obj %>% filter(state_fips == "02") %>% st_transform(2163)
hawaii <- sf_obj %>% filter(state_fips == "15") %>% st_transform(2163)
mainland <- sf_obj %>% filter(!state_fips %in% c("02", "15")) %>% st_transform(4326)
alaska_geom <- st_geometry(alaska) * 0.3 + c(-380000, -3000000)
hawaii_geom <- st_geometry(hawaii) * 1.2 + c(4500000, -900000)
st_crs(alaska_geom) <- 2163; st_crs(hawaii_geom) <- 2163
alaska <- st_set_geometry(alaska, alaska_geom) %>% st_transform(4326)
hawaii <- st_set_geometry(hawaii, hawaii_geom) %>% st_transform(4326)
bind_rows(mainland, alaska, hawaii) %>% st_as_sf()
}
internet_shifted <- shift_geometry(internet_clean)
# -------------------- 3. STATE GEOMETRY --------------------
state_geom_internet <- states(cb = TRUE, year = 2023) %>%
filter(!STATEFP %in% c("72", "78")) %>%
select(state_fips = STATEFP, geometry) %>%
mutate(link = paste0("internet-pages/", state_fips, ".html"))
state_geom_internet <- shift_geometry(state_geom_internet)
# -------------------- 4. WHITE MASK --------------------
world_box <- st_as_sfc(st_bbox(c(xmin = -180, ymin = -90, xmax = 180, ymax = 90)), crs = 4326)
us_box <- st_as_sfc(st_bbox(c(xmin = -130, ymin = 15, xmax = -60, ymax = 55)), crs = 4326)
mask_polygon <- st_difference(st_make_valid(world_box), st_make_valid(us_box)) %>%
st_collection_extract("POLYGON") %>%
st_set_crs(4326)
# -------------------- 5. MAP SETUP --------------------
vals <- internet_shifted$pct_no_internet
max_val <- max(vals, na.rm = TRUE)
# Create 10 equal-width bins between 0 and max
breaks <- seq(0, ceiling(max_val * 100) / 100, length.out = 11)  # 10 breaks = 11 endpoints
colors <- colorRampPalette(brewer.pal(9, "OrRd"))(length(breaks) - 1)
pal <- colorBin(colors, domain = vals, bins = breaks)
internet_map <- leaflet(options = leafletOptions(
minZoom = 4, maxZoom = 4,
zoomControl = FALSE, dragging = FALSE,
scrollWheelZoom = FALSE, doubleClickZoom = FALSE
)) %>%
addTiles(urlTemplate = "") %>%
addRectangles(lng1 = -180, lat1 = -90, lng2 = 180, lat2 = 90,
fillColor = "white", fillOpacity = 1, stroke = FALSE) %>%
addPolygons(data = mask_polygon, fillColor = "white", color = "white", weight = 0, fillOpacity = 1) %>%
addPolygons(
data = internet_shifted,
fillColor = ~pal(pct_no_internet),
color = "white", weight = 0.3, fillOpacity = 0.9,
label = ~paste0(NAME, ": ", round(pct_no_internet * 100, 1), "%"),
highlightOptions = highlightOptions(weight = 1, color = "black", bringToFront = TRUE)
) %>%
addPolygons(
data = state_geom_internet,
fillOpacity = 0, color = "black", weight = 1,
layerId = ~link,
highlightOptions = highlightOptions(weight = 2, color = "black", bringToFront = TRUE)
) %>%
addLegend(
position = "topright", colors = colors,
labels = paste0(round(breaks[-length(breaks)] * 100), "%"),
title = "Households Without Internet (2023)", opacity = 1
) %>%
setView(lng = -98.5, lat = 39.8, zoom = 8)
# -------------------- 6. JS CLICK HANDLER --------------------
internet_map <- onRender(internet_map, "
function(el, x) {
var map = this;
var hash = window.location.hash;
map.eachLayer(function(layer) {
if (layer.options && layer.options.layerId) {
layer.on('click', function(e) {
window.top.location.href = layer.options.layerId + hash;
});
}
});
}
")
# -------------------- 7. SAVE --------------------
saveWidget(
widget = internet_map,
file = "/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/misc/internet-map.html",
selfcontained = FALSE
)
# Reshape and calculate % without internet
internet_clean <- internet_data %>%
select(GEOID, NAME, variable, estimate, geometry) %>%
pivot_wider(names_from = variable, values_from = estimate) %>%
mutate(
pct_no_internet = no_internet / total,
state_fips = substr(GEOID, 1, 2)
)
# -------------------- 2. SHIFT GEOMETRY --------------------
shift_geometry <- function(sf_obj) {
alaska <- sf_obj %>% filter(state_fips == "02") %>% st_transform(2163)
hawaii <- sf_obj %>% filter(state_fips == "15") %>% st_transform(2163)
mainland <- sf_obj %>% filter(!state_fips %in% c("02", "15")) %>% st_transform(4326)
alaska_geom <- st_geometry(alaska) * 0.3 + c(-380000, -3000000)
hawaii_geom <- st_geometry(hawaii) * 1.2 + c(4500000, -900000)
st_crs(alaska_geom) <- 2163; st_crs(hawaii_geom) <- 2163
alaska <- st_set_geometry(alaska, alaska_geom) %>% st_transform(4326)
hawaii <- st_set_geometry(hawaii, hawaii_geom) %>% st_transform(4326)
bind_rows(mainland, alaska, hawaii) %>% st_as_sf()
}
internet_shifted <- shift_geometry(internet_clean)
# -------------------- 3. STATE GEOMETRY --------------------
state_geom_internet <- states(cb = TRUE, year = 2023) %>%
filter(!STATEFP %in% c("72", "78")) %>%
select(state_fips = STATEFP, geometry) %>%
mutate(link = paste0("internet-pages/", state_fips, ".html"))
state_geom_internet <- shift_geometry(state_geom_internet)
# -------------------- 4. WHITE MASK --------------------
world_box <- st_as_sfc(st_bbox(c(xmin = -180, ymin = -90, xmax = 180, ymax = 90)), crs = 4326)
us_box <- st_as_sfc(st_bbox(c(xmin = -130, ymin = 15, xmax = -60, ymax = 55)), crs = 4326)
mask_polygon <- st_difference(st_make_valid(world_box), st_make_valid(us_box)) %>%
st_collection_extract("POLYGON") %>%
st_set_crs(4326)
# -------------------- 5. MAP SETUP --------------------
vals <- internet_shifted$pct_no_internet
max_val <- max(vals, na.rm = TRUE)
# Create 10 equal-width bins between 0 and max
breaks <- seq(0, ceiling(max_val * 100) / 100, length.out = 11)  # 10 breaks = 11 endpoints
colors <- colorRampPalette(brewer.pal(9, "OrRd"))(length(breaks) - 1)
pal <- colorBin(colors, domain = vals, bins = breaks)
internet_map <- leaflet(options = leafletOptions(
minZoom = 4, maxZoom = 4,
zoomControl = FALSE, dragging = FALSE,
scrollWheelZoom = FALSE, doubleClickZoom = FALSE
)) %>%
addTiles(urlTemplate = "") %>%
addRectangles(lng1 = -180, lat1 = -90, lng2 = 180, lat2 = 90,
fillColor = "white", fillOpacity = 1, stroke = FALSE) %>%
addPolygons(data = mask_polygon, fillColor = "white", color = "white", weight = 0, fillOpacity = 1) %>%
addPolygons(
data = internet_shifted,
fillColor = ~pal(pct_no_internet),
color = "white", weight = 0.3, fillOpacity = 0.9,
label = ~paste0(NAME, ": ", round(pct_no_internet * 100, 1), "%"),
highlightOptions = highlightOptions(weight = 1, color = "black", bringToFront = TRUE)
) %>%
addPolygons(
data = state_geom_internet,
fillOpacity = 0, color = "black", weight = 1,
layerId = ~link,
highlightOptions = highlightOptions(weight = 2, color = "black", bringToFront = TRUE)
) %>%
addLegend(
position = "topright", colors = colors,
labels = paste0(round(breaks[-length(breaks)] * 100), "%"),
title = "Households Without Internet Access (2023)", opacity = 1
) %>%
setView(lng = -98.5, lat = 39.8, zoom = 8)
# -------------------- 6. JS CLICK HANDLER --------------------
internet_map <- onRender(internet_map, "
function(el, x) {
var map = this;
var hash = window.location.hash;
map.eachLayer(function(layer) {
if (layer.options && layer.options.layerId) {
layer.on('click', function(e) {
window.top.location.href = layer.options.layerId + hash;
});
}
});
}
")
# -------------------- 7. SAVE --------------------
saveWidget(
widget = internet_map,
file = "/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/misc/internet-map.html",
selfcontained = FALSE
)
walk(unique(internet_clean$state_fips), function(fips) {
state_data <- internet_clean %>%
filter(state_fips == fips)
vals <- state_data$pct_no_internet
vals <- vals[is.finite(vals) & vals > 0]
if (length(unique(vals)) < 2) return(NULL)
breaks <- pretty(vals)
colors <- colorRampPalette(brewer.pal(9, "YlOrRd"))(length(breaks) - 1)
pal <- colorBin(palette = colors, domain = vals, bins = breaks)
leaflet_map <- leaflet(state_data, options = leafletOptions(minZoom = 5, maxZoom = 8)) %>%
addProviderTiles("CartoDB.PositronNoLabels") %>%
addPolygons(
fillColor = ~pal(pct_no_internet),
fillOpacity = 0.9,
color = "white",
weight = 1,
label = ~paste0(NAME, ": ", round(pct_no_internet * 100, 1), "%"),
highlightOptions = highlightOptions(weight = 2, color = "black", bringToFront = TRUE)
) %>%
addLegend(
position = "topright",
colors = colors,
labels = paste0(round(breaks[-length(breaks)] * 100, 1), "%"),
title = "Households Without Internet Access (2023)",
opacity = 1
)
saveWidget(
widget = leaflet_map,
file = paste0(
"/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/misc/internet-maps/",
fips, ".html"
),
selfcontained = FALSE
)
})
vars <- c(
population = "B01003_001",
median_age = "B01002_001",
income = "B19301_001",
white = "B02001_002",
black = "B02001_003",
asian = "B02001_005",
hispanic = "B03003_003",
poverty = "B17001_002",
poverty_total = "B17001_001",
education_bachelors = "B15003_022",
education_total = "B15003_001",
median_rent = "B25064_001",
median_home_value = "B25077_001"
)
# Get state list
state_list <- unique(fips_codes$state)[!fips_codes$state %in% c("72", "78")]
data("fips_codes")
library(tidycensus)
data("fips_codes")
vars <- c(
population = "B01003_001",
median_age = "B01002_001",
income = "B19301_001",
white = "B02001_002",
black = "B02001_003",
asian = "B02001_005",
hispanic = "B03003_003",
poverty = "B17001_002",
poverty_total = "B17001_001",
education_bachelors = "B15003_022",
education_total = "B15003_001",
median_rent = "B25064_001",
median_home_value = "B25077_001"
)
# Get state list
state_list <- unique(fips_codes$state)[!fips_codes$state %in% c("72", "78")]
# Output dir
output_dir <- "/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/explore/school-district-jsons"
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
walk(state_list, function(state_abbr) {
message("Processing: ", state_abbr)
data <- tryCatch({
get_acs(
geography = "school district (unified)",
state = state_abbr,
variables = vars,
year = 2023,
survey = "acs5",
output = "wide",
geometry = FALSE
)
}, error = function(e) {
message("Skipping: ", state_abbr)
return(NULL)
})
if (is.null(data)) return(NULL)
cleaned <- data %>%
transmute(
GEOID,
NAME = str_remove(NAME, " School District.*"),
population = populationE,
median_age = median_ageE,
income = incomeE,
median_rent = median_rentE,
median_home_value = median_home_valueE,
pct_white = 100 * whiteE / populationE,
pct_black = 100 * blackE / populationE,
pct_asian = 100 * asianE / populationE,
pct_hispanic = 100 * hispanicE / populationE,
pct_poverty = 100 * povertyE / poverty_totalE,
pct_bachelors = 100 * education_bachelorsE / education_totalE
)
# Save as JSON
write_json(
cleaned,
path = file.path(output_dir, paste0("districts_", tolower(state_abbr), ".json")),
pretty = TRUE,
na = "null",
auto_unbox = TRUE
)
})
library(purrr)
vars <- c(
population = "B01003_001",
median_age = "B01002_001",
income = "B19301_001",
white = "B02001_002",
black = "B02001_003",
asian = "B02001_005",
hispanic = "B03003_003",
poverty = "B17001_002",
poverty_total = "B17001_001",
education_bachelors = "B15003_022",
education_total = "B15003_001",
median_rent = "B25064_001",
median_home_value = "B25077_001"
)
# Get state list
state_list <- unique(fips_codes$state)[!fips_codes$state %in% c("72", "78")]
# Output dir
output_dir <- "/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/explore/school-district-jsons"
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
walk(state_list, function(state_abbr) {
message("Processing: ", state_abbr)
data <- tryCatch({
get_acs(
geography = "school district (unified)",
state = state_abbr,
variables = vars,
year = 2023,
survey = "acs5",
output = "wide",
geometry = FALSE
)
}, error = function(e) {
message("Skipping: ", state_abbr)
return(NULL)
})
if (is.null(data)) return(NULL)
cleaned <- data %>%
transmute(
GEOID,
NAME = str_remove(NAME, " School District.*"),
population = populationE,
median_age = median_ageE,
income = incomeE,
median_rent = median_rentE,
median_home_value = median_home_valueE,
pct_white = 100 * whiteE / populationE,
pct_black = 100 * blackE / populationE,
pct_asian = 100 * asianE / populationE,
pct_hispanic = 100 * hispanicE / populationE,
pct_poverty = 100 * povertyE / poverty_totalE,
pct_bachelors = 100 * education_bachelorsE / education_totalE
)
# Save as JSON
write_json(
cleaned,
path = file.path(output_dir, paste0("districts_", tolower(state_abbr), ".json")),
pretty = TRUE,
na = "null",
auto_unbox = TRUE
)
})
library(tidycensus)
library(tidyverse)
library(jsonlite)
library(stringr)
vars <- c(
population = "B01003_001",
median_age = "B01002_001",
income = "B19301_001",
white = "B02001_002",
black = "B02001_003",
asian = "B02001_005",
hispanic = "B03003_003",
poverty = "B17001_002",
poverty_total = "B17001_001",
education_bachelors = "B15003_022",
education_total = "B15003_001",
median_rent = "B25064_001",
median_home_value = "B25077_001"
)
# Get state list
state_list <- unique(fips_codes$state)[!fips_codes$state %in% c("72", "78")]
# Output dir
output_dir <- "/Users/theoweinstock/University of Michigan Dropbox/Theo Weinstock/SSDAN/ssdan-mapping/explore/school-district-jsons"
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
walk(state_list, function(state_abbr) {
message("Processing: ", state_abbr)
data <- tryCatch({
get_acs(
geography = "school district (unified)",
state = state_abbr,
variables = vars,
year = 2023,
survey = "acs5",
output = "wide",
geometry = FALSE
)
}, error = function(e) {
message("Skipping: ", state_abbr)
return(NULL)
})
if (is.null(data)) return(NULL)
cleaned <- data %>%
transmute(
GEOID,
NAME = str_remove(NAME, " School District.*"),
population = populationE,
median_age = median_ageE,
income = incomeE,
median_rent = median_rentE,
median_home_value = median_home_valueE,
pct_white = 100 * whiteE / populationE,
pct_black = 100 * blackE / populationE,
pct_asian = 100 * asianE / populationE,
pct_hispanic = 100 * hispanicE / populationE,
pct_poverty = 100 * povertyE / poverty_totalE,
pct_bachelors = 100 * education_bachelorsE / education_totalE
)
# Save as JSON
write_json(
cleaned,
path = file.path(output_dir, paste0("districts_", tolower(state_abbr), ".json")),
pretty = TRUE,
na = "null",
auto_unbox = TRUE
)
})
